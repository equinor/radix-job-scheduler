// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/v1/handler.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/equinor/radix-job-scheduler/models"
	common "github.com/equinor/radix-job-scheduler/models/common"
	v2 "github.com/equinor/radix-job-scheduler/models/v2"
	kube "github.com/equinor/radix-operator/pkg/apis/kube"
	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	gomock "github.com/golang/mock/gomock"
	v10 "k8s.io/api/core/v1"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// CopyRadixBatch mocks base method.
func (m *MockHandler) CopyRadixBatch(ctx context.Context, batchName, deploymentName string) (*v2.RadixBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyRadixBatch", ctx, batchName, deploymentName)
	ret0, _ := ret[0].(*v2.RadixBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyRadixBatch indicates an expected call of CopyRadixBatch.
func (mr *MockHandlerMockRecorder) CopyRadixBatch(ctx, batchName, deploymentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyRadixBatch", reflect.TypeOf((*MockHandler)(nil).CopyRadixBatch), ctx, batchName, deploymentName)
}

// CopyRadixBatchJob mocks base method.
func (m *MockHandler) CopyRadixBatchJob(ctx context.Context, jobName, deploymentName string) (*v2.RadixBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyRadixBatchJob", ctx, jobName, deploymentName)
	ret0, _ := ret[0].(*v2.RadixBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyRadixBatchJob indicates an expected call of CopyRadixBatchJob.
func (mr *MockHandlerMockRecorder) CopyRadixBatchJob(ctx, jobName, deploymentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyRadixBatchJob", reflect.TypeOf((*MockHandler)(nil).CopyRadixBatchJob), ctx, jobName, deploymentName)
}

// CreateRadixBatch mocks base method.
func (m *MockHandler) CreateRadixBatch(ctx context.Context, batchScheduleDescription *common.BatchScheduleDescription) (*v2.RadixBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRadixBatch", ctx, batchScheduleDescription)
	ret0, _ := ret[0].(*v2.RadixBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRadixBatch indicates an expected call of CreateRadixBatch.
func (mr *MockHandlerMockRecorder) CreateRadixBatch(ctx, batchScheduleDescription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRadixBatch", reflect.TypeOf((*MockHandler)(nil).CreateRadixBatch), ctx, batchScheduleDescription)
}

// CreateRadixBatchSingleJob mocks base method.
func (m *MockHandler) CreateRadixBatchSingleJob(ctx context.Context, jobScheduleDescription *common.JobScheduleDescription) (*v2.RadixBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRadixBatchSingleJob", ctx, jobScheduleDescription)
	ret0, _ := ret[0].(*v2.RadixBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRadixBatchSingleJob indicates an expected call of CreateRadixBatchSingleJob.
func (mr *MockHandlerMockRecorder) CreateRadixBatchSingleJob(ctx, jobScheduleDescription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRadixBatchSingleJob", reflect.TypeOf((*MockHandler)(nil).CreateRadixBatchSingleJob), ctx, jobScheduleDescription)
}

// DeleteRadixBatchJob mocks base method.
func (m *MockHandler) DeleteRadixBatchJob(ctx context.Context, jobName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRadixBatchJob", ctx, jobName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRadixBatchJob indicates an expected call of DeleteRadixBatchJob.
func (mr *MockHandlerMockRecorder) DeleteRadixBatchJob(ctx, jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRadixBatchJob", reflect.TypeOf((*MockHandler)(nil).DeleteRadixBatchJob), ctx, jobName)
}

// GetEnv mocks base method.
func (m *MockHandler) GetEnv() *models.Env {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnv")
	ret0, _ := ret[0].(*models.Env)
	return ret0
}

// GetEnv indicates an expected call of GetEnv.
func (mr *MockHandlerMockRecorder) GetEnv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnv", reflect.TypeOf((*MockHandler)(nil).GetEnv))
}

// GetKubeUtil mocks base method.
func (m *MockHandler) GetKubeUtil() *kube.Kube {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubeUtil")
	ret0, _ := ret[0].(*kube.Kube)
	return ret0
}

// GetKubeUtil indicates an expected call of GetKubeUtil.
func (mr *MockHandlerMockRecorder) GetKubeUtil() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeUtil", reflect.TypeOf((*MockHandler)(nil).GetKubeUtil))
}

// GetRadixBatch mocks base method.
func (m *MockHandler) GetRadixBatch(ctx context.Context, batchName string) (*v2.RadixBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRadixBatch", ctx, batchName)
	ret0, _ := ret[0].(*v2.RadixBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRadixBatch indicates an expected call of GetRadixBatch.
func (mr *MockHandlerMockRecorder) GetRadixBatch(ctx, batchName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRadixBatch", reflect.TypeOf((*MockHandler)(nil).GetRadixBatch), ctx, batchName)
}

// GetRadixBatchJobMessagesAndPodMaps mocks base method.
func (m *MockHandler) GetRadixBatchJobMessagesAndPodMaps(ctx context.Context, selectorForRadixBatchPods string) (map[string]string, map[string]v10.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRadixBatchJobMessagesAndPodMaps", ctx, selectorForRadixBatchPods)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(map[string]v10.Pod)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRadixBatchJobMessagesAndPodMaps indicates an expected call of GetRadixBatchJobMessagesAndPodMaps.
func (mr *MockHandlerMockRecorder) GetRadixBatchJobMessagesAndPodMaps(ctx, selectorForRadixBatchPods interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRadixBatchJobMessagesAndPodMaps", reflect.TypeOf((*MockHandler)(nil).GetRadixBatchJobMessagesAndPodMaps), ctx, selectorForRadixBatchPods)
}

// GetRadixBatchSingleJobs mocks base method.
func (m *MockHandler) GetRadixBatchSingleJobs(ctx context.Context) ([]v2.RadixBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRadixBatchSingleJobs", ctx)
	ret0, _ := ret[0].([]v2.RadixBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRadixBatchSingleJobs indicates an expected call of GetRadixBatchSingleJobs.
func (mr *MockHandlerMockRecorder) GetRadixBatchSingleJobs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRadixBatchSingleJobs", reflect.TypeOf((*MockHandler)(nil).GetRadixBatchSingleJobs), ctx)
}

// GetRadixBatches mocks base method.
func (m *MockHandler) GetRadixBatches(ctx context.Context) ([]v2.RadixBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRadixBatches", ctx)
	ret0, _ := ret[0].([]v2.RadixBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRadixBatches indicates an expected call of GetRadixBatches.
func (mr *MockHandlerMockRecorder) GetRadixBatches(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRadixBatches", reflect.TypeOf((*MockHandler)(nil).GetRadixBatches), ctx)
}

// GetRadixDeployJobComponent mocks base method.
func (m *MockHandler) GetRadixDeployJobComponent() *v1.RadixDeployJobComponent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRadixDeployJobComponent")
	ret0, _ := ret[0].(*v1.RadixDeployJobComponent)
	return ret0
}

// GetRadixDeployJobComponent indicates an expected call of GetRadixDeployJobComponent.
func (mr *MockHandlerMockRecorder) GetRadixDeployJobComponent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRadixDeployJobComponent", reflect.TypeOf((*MockHandler)(nil).GetRadixDeployJobComponent))
}

// RestartRadixBatch mocks base method.
func (m *MockHandler) RestartRadixBatch(ctx context.Context, batchName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartRadixBatch", ctx, batchName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestartRadixBatch indicates an expected call of RestartRadixBatch.
func (mr *MockHandlerMockRecorder) RestartRadixBatch(ctx, batchName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartRadixBatch", reflect.TypeOf((*MockHandler)(nil).RestartRadixBatch), ctx, batchName)
}

// RestartRadixBatchJob mocks base method.
func (m *MockHandler) RestartRadixBatchJob(ctx context.Context, batchName, jobName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartRadixBatchJob", ctx, batchName, jobName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestartRadixBatchJob indicates an expected call of RestartRadixBatchJob.
func (mr *MockHandlerMockRecorder) RestartRadixBatchJob(ctx, batchName, jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartRadixBatchJob", reflect.TypeOf((*MockHandler)(nil).RestartRadixBatchJob), ctx, batchName, jobName)
}

// StopAllRadixBatches mocks base method.
func (m *MockHandler) StopAllRadixBatches(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAllRadixBatches", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopAllRadixBatches indicates an expected call of StopAllRadixBatches.
func (mr *MockHandlerMockRecorder) StopAllRadixBatches(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAllRadixBatches", reflect.TypeOf((*MockHandler)(nil).StopAllRadixBatches), ctx)
}

// StopAllSingleRadixJobs mocks base method.
func (m *MockHandler) StopAllSingleRadixJobs(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAllSingleRadixJobs", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopAllSingleRadixJobs indicates an expected call of StopAllSingleRadixJobs.
func (mr *MockHandlerMockRecorder) StopAllSingleRadixJobs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAllSingleRadixJobs", reflect.TypeOf((*MockHandler)(nil).StopAllSingleRadixJobs), ctx)
}

// StopRadixBatch mocks base method.
func (m *MockHandler) StopRadixBatch(ctx context.Context, batchName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopRadixBatch", ctx, batchName)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopRadixBatch indicates an expected call of StopRadixBatch.
func (mr *MockHandlerMockRecorder) StopRadixBatch(ctx, batchName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopRadixBatch", reflect.TypeOf((*MockHandler)(nil).StopRadixBatch), ctx, batchName)
}

// StopRadixBatchJob mocks base method.
func (m *MockHandler) StopRadixBatchJob(ctx context.Context, batchName, jobName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopRadixBatchJob", ctx, batchName, jobName)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopRadixBatchJob indicates an expected call of StopRadixBatchJob.
func (mr *MockHandlerMockRecorder) StopRadixBatchJob(ctx, batchName, jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopRadixBatchJob", reflect.TypeOf((*MockHandler)(nil).StopRadixBatchJob), ctx, batchName, jobName)
}
