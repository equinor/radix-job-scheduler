// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/jobs/job.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/equinor/radix-job-scheduler/models"
	gomock "github.com/golang/mock/gomock"
)

// MockJob is a mock of Job interface.
type MockJob struct {
	ctrl     *gomock.Controller
	recorder *MockJobMockRecorder
}

// MockJobMockRecorder is the mock recorder for MockJob.
type MockJobMockRecorder struct {
	mock *MockJob
}

// NewMockJob creates a new mock instance.
func NewMockJob(ctrl *gomock.Controller) *MockJob {
	mock := &MockJob{ctrl: ctrl}
	mock.recorder = &MockJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJob) EXPECT() *MockJobMockRecorder {
	return m.recorder
}

// CreateJob mocks base method.
func (m *MockJob) CreateJob(jobScheduleDescription *models.JobScheduleDescription, batchName string) (*models.JobStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", jobScheduleDescription, batchName)
	ret0, _ := ret[0].(*models.JobStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockJobMockRecorder) CreateJob(jobScheduleDescription, batchName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockJob)(nil).CreateJob), jobScheduleDescription, batchName)
}

// DeleteJob mocks base method.
func (m *MockJob) DeleteJob(jobName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", jobName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockJobMockRecorder) DeleteJob(jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockJob)(nil).DeleteJob), jobName)
}

// GetJob mocks base method.
func (m *MockJob) GetJob(name string) (*models.JobStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", name)
	ret0, _ := ret[0].(*models.JobStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockJobMockRecorder) GetJob(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockJob)(nil).GetJob), name)
}

// GetJobs mocks base method.
func (m *MockJob) GetJobs() ([]models.JobStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobs")
	ret0, _ := ret[0].([]models.JobStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobs indicates an expected call of GetJobs.
func (mr *MockJobMockRecorder) GetJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobs", reflect.TypeOf((*MockJob)(nil).GetJobs))
}

// MaintainHistoryLimit mocks base method.
func (m *MockJob) MaintainHistoryLimit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaintainHistoryLimit")
	ret0, _ := ret[0].(error)
	return ret0
}

// MaintainHistoryLimit indicates an expected call of MaintainHistoryLimit.
func (mr *MockJobMockRecorder) MaintainHistoryLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaintainHistoryLimit", reflect.TypeOf((*MockJob)(nil).MaintainHistoryLimit))
}
